<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>源码阅读 - Hyperf数据库连接管理</title>
      <link href="/2020/hyperf-db-connection/"/>
      <url>/2020/hyperf-db-connection/</url>
      
        <content type="html"><![CDATA[<h2 id="加载容器"><a href="#加载容器" class="headerlink" title="加载容器"></a>加载容器</h2><pre><code>- bin/hyperf.php  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> BASE_PATH . <span class="string">'/config/container.php'</span></span><br></pre></td></tr></table></figure>- vendor/hyperf/di/src/Definition/DefinitionSourceFactory.php:46<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProviderConfig::load()</span><br></pre></td></tr></table></figure></code></pre><h2 id="寻找服务提供者配置"><a href="#寻找服务提供者配置" class="headerlink" title="寻找服务提供者配置"></a>寻找服务提供者配置</h2><pre><code>- vendor/hyperf/config/src/ProviderConfig.php:37  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Composer::getMergedExtra(<span class="string">'hyperf'</span>)[<span class="string">'config'</span>] ?? []</span><br><span class="line">```  </span><br><span class="line">找的时候就去composer.lock读几个特定的键（恭喜composer.lock有了额外功能）</span><br><span class="line">``` php</span><br><span class="line">        <span class="keyword">if</span> (! $path) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \RuntimeException(<span class="string">'composer.lock not found.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>::$content = collect(json_decode(file_get_contents($path), <span class="keyword">true</span>));</span><br><span class="line">        $packages = <span class="keyword">self</span>::$content-&gt;offsetGet(<span class="string">'packages'</span>) ?? [];</span><br><span class="line">        $packagesDev = <span class="keyword">self</span>::$content-&gt;offsetGet(<span class="string">'packages-dev'</span>) ?? [];</span><br><span class="line">        <span class="keyword">foreach</span> (array_merge($packages, $packagesDev) <span class="keyword">as</span> $package) &#123;</span><br><span class="line">            $packageName = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($package ?? [] <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($key === <span class="string">'name'</span>) &#123;</span><br><span class="line">                    $packageName = $value;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">switch</span> ($key) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'extra'</span>:</span><br><span class="line">                        $packageName &amp;&amp; <span class="keyword">self</span>::$extra[$packageName] = $value;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'scripts'</span>:</span><br><span class="line">                        $packageName &amp;&amp; <span class="keyword">self</span>::$scripts[$packageName] = $value;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'version'</span>:</span><br><span class="line">                        $packageName &amp;&amp; <span class="keyword">self</span>::$versions[$packageName] = $value;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">```  </span><br><span class="line">composer.lock 配合一下</span><br><span class="line">``` json</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"hyperf/db-connection"</span>,</span><br><span class="line">        <span class="string">"extra"</span>: &#123;</span><br><span class="line">            <span class="string">"branch-alias"</span>: &#123;</span><br><span class="line">                <span class="string">"dev-master"</span>: <span class="string">"1.1-dev"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"hyperf"</span>: &#123;</span><br><span class="line">                <span class="string">"config"</span>: <span class="string">"Hyperf\\DbConnection\\ConfigProvider"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>结果<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="string">"Hyperf\AsyncQueue\ConfigProvider"</span></span><br><span class="line">    <span class="number">1</span> =&gt; <span class="string">"Hyperf\Cache\ConfigProvider"</span></span><br><span class="line">    <span class="number">2</span> =&gt; <span class="string">"Hyperf\Config\ConfigProvider"</span></span><br><span class="line">    <span class="number">3</span> =&gt; <span class="string">"Hyperf\Constants\ConfigProvider"</span></span><br><span class="line">    <span class="number">4</span> =&gt; <span class="string">"Hyperf\Crontab\ConfigProvider"</span></span><br><span class="line">    <span class="number">5</span> =&gt; <span class="string">"Hyperf\DbConnection\ConfigProvider"</span></span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>DB相关配置<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Database</span>\<span class="title">ConnectionResolverInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Database</span>\<span class="title">Connectors</span>\<span class="title">ConnectionFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Database</span>\<span class="title">Connectors</span>\<span class="title">MySqlConnector</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">MigrationRepositoryInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">DbConnection</span>\<span class="title">Listener</span>\<span class="title">RegisterConnectionResolverListener</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Hyperf</span>\<span class="title">DbConnection</span>\<span class="title">Pool</span>\<span class="title">PoolFactory</span>;</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    <span class="string">'dependencies'</span> =&gt; [</span><br><span class="line">        PoolFactory::class =&gt; PoolFactory::class,</span><br><span class="line">        ConnectionFactory::class =&gt; ConnectionFactory::class,</span><br><span class="line">        ConnectionResolverInterface::class =&gt; ConnectionResolver::class,</span><br><span class="line">        <span class="string">'db.connector.mysql'</span> =&gt; MySqlConnector::class,</span><br><span class="line">        MigrationRepositoryInterface::class =&gt; DatabaseMigrationRepositoryFactory::class,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'listeners'</span> =&gt; [</span><br><span class="line">        RegisterConnectionResolverListener::class,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></code></pre><h2 id="应用启动时初始化数据库连接解析器-Register-setConnectionResolver"><a href="#应用启动时初始化数据库连接解析器-Register-setConnectionResolver" class="headerlink" title="应用启动时初始化数据库连接解析器 Register::setConnectionResolver"></a>应用启动时初始化数据库连接解析器 <code>Register::setConnectionResolver</code></h2><pre><code>vendor/hyperf/db-connection/src/Listener/RegisterConnectionResolverListener.php:32<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listen</span><span class="params">()</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        BootApplication::class,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(object $event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;container-&gt;has(ConnectionResolverInterface::class)) &#123;</span><br><span class="line">        Register::setConnectionResolver(</span><br><span class="line">            <span class="keyword">$this</span>-&gt;container-&gt;get(ConnectionResolverInterface::class)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="在Model上调用Query时，通过一连串调用，初始化一堆东西，包括数据库连接"><a href="#在Model上调用Query时，通过一连串调用，初始化一堆东西，包括数据库连接" class="headerlink" title="在Model上调用Query时，通过一连串调用，初始化一堆东西，包括数据库连接"></a>在Model上调用Query时，通过一连串调用，初始化一堆东西，包括数据库连接</h2><pre><code>vendor/hyperf/database/src/Model/Model.php:939  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="keyword">static</span>())-&gt;newQuery();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newQuery</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;registerGlobalScopes(<span class="keyword">$this</span>-&gt;newQueryWithoutScopes());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newQueryWithoutScopes</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;newModelQuery()-&gt;with(<span class="keyword">$this</span>-&gt;with)-&gt;withCount(<span class="keyword">$this</span>-&gt;withCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newModelQuery</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;newModelBuilder(<span class="keyword">$this</span>-&gt;newBaseQueryBuilder())-&gt;setModel(<span class="keyword">$this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">newBaseQueryBuilder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $connection = <span class="keyword">$this</span>-&gt;getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> QueryBuilder($connection, $connection-&gt;getQueryGrammar(), $connection-&gt;getPostProcessor());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里初始化数据库连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getConnection</span><span class="params">()</span>: <span class="title">ConnectionInterface</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Register::resolveConnection(<span class="keyword">$this</span>-&gt;getConnectionName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>初始化的具体步骤，由上面第3步的解析器包办  vendor/hyperf/database/src/Model/Register.php:38<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveConnection</span><span class="params">($connection = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::$resolver-&gt;connection($connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面说的是 `Hyperf\Database\Model\Model` 的实现，而 `Hyperf\DbConnection\Model\Model` 继承了它，并且覆盖 `getConnection` 方法，变成了vendor/hyperf/db-connection/src/Model/Model.php:32<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getConnection</span><span class="params">()</span>: <span class="title">ConnectionInterface</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $connectionName = <span class="keyword">$this</span>-&gt;getConnectionName();</span><br><span class="line">    $resolver = <span class="keyword">$this</span>-&gt;getContainer()-&gt;get(ConnectionResolverInterface::class);</span><br><span class="line">    <span class="keyword">return</span> $resolver-&gt;connection($connectionName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>虽然做的事跟基类是一样的，不过变成了自己一把梭，第3步的解析器被无视了  </code></pre><h2 id="实际获取一个数据库连接"><a href="#实际获取一个数据库连接" class="headerlink" title="实际获取一个数据库连接"></a>实际获取一个数据库连接</h2><pre><code>vendor/hyperf/db-connection/src/ConnectionResolver.php:52<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connection</span><span class="params">($name = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null($name)) &#123;</span><br><span class="line">        $name = <span class="keyword">$this</span>-&gt;getDefaultConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $connection = <span class="keyword">null</span>;</span><br><span class="line">    $id = <span class="keyword">$this</span>-&gt;getContextKey($name);</span><br><span class="line">    <span class="keyword">if</span> (Context::has($id)) &#123;</span><br><span class="line">        $connection = Context::get($id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! $connection <span class="keyword">instanceof</span> ConnectionInterface) &#123;</span><br><span class="line">        $pool = <span class="keyword">$this</span>-&gt;factory-&gt;getPool($name);</span><br><span class="line">        $connection = $pool-&gt;get();   <span class="comment">// 获取Hyperf\DbConnection\Connection类</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// PDO is initialized as an anonymous function, so there is no IO exception,</span></span><br><span class="line">            <span class="comment">// but if other exceptions are thrown, the connection will not return to the connection pool properly.</span></span><br><span class="line">            $connection = $connection-&gt;getConnection(); <span class="comment">// 检查连接是否超时，超时则重连</span></span><br><span class="line">            Context::set($id, $connection);  <span class="comment">// 保存当前协程所用的连接</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Coroutine::inCoroutine()) &#123;</span><br><span class="line">                defer(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($connection)</span> </span>&#123;</span><br><span class="line">                    $connection-&gt;release();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $connection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>vendor/hyperf/pool/src/Pool.php:58<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span>: <span class="title">ConnectionInterface</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $connection = <span class="keyword">$this</span>-&gt;getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;frequency <span class="keyword">instanceof</span> FrequencyInterface) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;frequency-&gt;hit();   <span class="comment">// 记录一次从池子中获取连接</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;frequency <span class="keyword">instanceof</span> LowFrequencyInterface) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;frequency-&gt;isLowFrequency()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;flush();   <span class="comment">// 获取连接频率不高时，释放一些连接</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getConnection</span><span class="params">()</span>: <span class="title">ConnectionInterface</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取池子中连接</span></span><br><span class="line">    $num = <span class="keyword">$this</span>-&gt;getConnectionsInChannel();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 没有空闲连接且连接数没达到上限时，创建连接</span></span><br><span class="line">        <span class="keyword">if</span> ($num === <span class="number">0</span> &amp;&amp; <span class="keyword">$this</span>-&gt;currentConnections &lt; <span class="keyword">$this</span>-&gt;option-&gt;getMaxConnections()) &#123;</span><br><span class="line">            ++<span class="keyword">$this</span>-&gt;currentConnections;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createConnection();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable $throwable) &#123;</span><br><span class="line">        --<span class="keyword">$this</span>-&gt;currentConnections;</span><br><span class="line">        <span class="keyword">throw</span> $throwable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从存储中pop出一个连接</span></span><br><span class="line">    $connection = <span class="keyword">$this</span>-&gt;channel-&gt;pop(<span class="keyword">$this</span>-&gt;option-&gt;getWaitTimeout());</span><br><span class="line">    <span class="keyword">return</span> $connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">createConnection</span><span class="params">()</span>: <span class="title">ConnectionInterface</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Connection(<span class="keyword">$this</span>-&gt;container, <span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>vendor/hyperf/db-connection/src/Connection.php:84<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getActiveConnection</span><span class="params">()</span>: <span class="title">DbConnectionInterface</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;check()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;reconnect()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConnectionException(<span class="string">'Connection reconnect failed.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接上次使用时间，跟配置的超时时间对比，作为超时判断</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $maxIdleTime = <span class="keyword">$this</span>-&gt;pool-&gt;getOption()-&gt;getMaxIdleTime();</span><br><span class="line">    $now = microtime(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> ($now &gt; $maxIdleTime + <span class="keyword">$this</span>-&gt;lastUseTime) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;lastUseTime = $now;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">reconnect</span><span class="params">()</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这个connection包含了连到数据库的闭包，在真实操作数据库时执行</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;connection = <span class="keyword">$this</span>-&gt;factory-&gt;make(<span class="keyword">$this</span>-&gt;config);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;connection <span class="keyword">instanceof</span> \Hyperf\Database\Connection) &#123;</span><br><span class="line">        <span class="comment">// Reset event dispatcher after db reconnect.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;container-&gt;has(EventDispatcherInterface::class)) &#123;</span><br><span class="line">            $dispatcher = <span class="keyword">$this</span>-&gt;container-&gt;get(EventDispatcherInterface::class);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection-&gt;setEventDispatcher($dispatcher);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset reconnector after db reconnect.</span></span><br><span class="line">        <span class="comment">// 重连器，是个重连数据库的闭包，如下所见，重连器会重新生成上面的连接闭包，并执行它来实现重连</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;connection-&gt;setReconnector(<span class="function"><span class="keyword">function</span> <span class="params">($connection)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;refresh($connection);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;lastUseTime = microtime(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">refresh</span><span class="params">(\Hyperf\Database\Connection $connection)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $refresh = <span class="keyword">$this</span>-&gt;factory-&gt;make(<span class="keyword">$this</span>-&gt;config);</span><br><span class="line">    <span class="keyword">if</span> ($refresh <span class="keyword">instanceof</span> \Hyperf\Database\Connection) &#123;</span><br><span class="line">        $connection-&gt;disconnect();</span><br><span class="line">        $connection-&gt;setPdo($refresh-&gt;getPdo());</span><br><span class="line">        $connection-&gt;setReadPdo($refresh-&gt;getReadPdo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;logger-&gt;warning(<span class="string">'Database connection refreshed.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>vendor/hyperf/database/src/Connectors/ConnectionFactory.php:45<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">(array $config, $name = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $config = <span class="keyword">$this</span>-&gt;parseConfig($config, $name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'read'</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createReadWriteConnection($config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createSingleConnection($config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>连接数据库的闭包长这样  vendor/hyperf/database/src/Connectors/ConnectionFactory.php:196<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">createPdoResolverWithHosts</span><span class="params">(array $config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (Arr::shuffle($hosts = <span class="keyword">$this</span>-&gt;parseHosts($config)) <span class="keyword">as</span> $key =&gt; $host) &#123;</span><br><span class="line">            $config[<span class="string">'host'</span>] = $host;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createConnector($config)-&gt;connect($config);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> $e;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse the hosts configuration item into an array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseHosts</span><span class="params">(array $config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arr::wrap($config[<span class="string">'host'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new Closure that resolves to a PDO instance where there is no configured host.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \Closure</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">createPdoResolverWithoutHosts</span><span class="params">(array $config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createConnector($config)-&gt;connect($config);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>闭包里的`Connector`是这样连数据库的  vendor/hyperf/database/src/Connectors/Connector.php:105<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">createPdoConnection</span><span class="params">($dsn, $username, $password, $options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (class_exists(PDOConnection::class) &amp;&amp; ! <span class="keyword">$this</span>-&gt;isPersistentConnection($options)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PDOConnection($dsn, $username, $password, $options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PDO($dsn, $username, $password, $options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>真实执行数据库操作，比如select时，会通过pdo属性的值获取连接，此时如果pdo还是个闭包，就会执行闭包，建立到数据库的网络连接，并且更新把pdo的值从闭包更新成 `PDO` 对象<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(string $query, array $bindings = [], bool $useReadPdo = true)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;run($query, $bindings, <span class="function"><span class="keyword">function</span> <span class="params">($query, $bindings)</span> <span class="title">use</span> <span class="params">($useReadPdo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;pretending()) &#123;</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For select statements, we'll simply execute the query and return an array</span></span><br><span class="line">        <span class="comment">// of the database result set. Each element in the array will be a single</span></span><br><span class="line">        <span class="comment">// row from the database table, and will either be an array or objects.</span></span><br><span class="line">        $statement = <span class="keyword">$this</span>-&gt;prepared(<span class="keyword">$this</span>-&gt;getPdoForSelect($useReadPdo)</span><br><span class="line">            -&gt;prepare($query));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;bindValues($statement, <span class="keyword">$this</span>-&gt;prepareBindings($bindings));</span><br><span class="line"></span><br><span class="line">        $statement-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $statement-&gt;fetchAll();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPdo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;pdo <span class="keyword">instanceof</span> Closure) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;pdo = call_user_func(<span class="keyword">$this</span>-&gt;pdo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;pdo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the current PDO connection used for reading.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \PDO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getReadPdo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;transactions &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getPdo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;recordsModified &amp;&amp; <span class="keyword">$this</span>-&gt;getConfig(<span class="string">'sticky'</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getPdo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;readPdo <span class="keyword">instanceof</span> Closure) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;readPdo = call_user_func(<span class="keyword">$this</span>-&gt;readPdo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;readPdo ?: <span class="keyword">$this</span>-&gt;getPdo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($query, $bindings, Closure $callback)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里会判断PDO是否是空的</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;reconnectIfMissingConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here we will run this query. If an exception occurs we'll determine if it was</span></span><br><span class="line">    <span class="comment">// caused by a connection that has been lost. If that is the cause, we'll try</span></span><br><span class="line">    <span class="comment">// to re-establish connection and re-run the query with a fresh connection.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;runQueryCallback($query, $bindings, $callback);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (QueryException $e) &#123;</span><br><span class="line">        <span class="comment">// 这里也会判断是不是连接失败引起的异常，是的话也会重连</span></span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;handleQueryException(</span><br><span class="line">            $e,</span><br><span class="line">            $query,</span><br><span class="line">            $bindings,</span><br><span class="line">            $callback</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">handleQueryException</span><span class="params">($e, $query, $bindings, Closure $callback)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;tryAgainIfCausedByLostConnection(</span><br><span class="line">        $e,</span><br><span class="line">        $query,</span><br><span class="line">        $bindings,</span><br><span class="line">        $callback</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle a query exception that occurred during query execution.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $query</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $bindings</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> QueryException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tryAgainIfCausedByLostConnection</span><span class="params">(QueryException $e, $query, $bindings, Closure $callback)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;causedByLostConnection($e-&gt;getPrevious())) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;reconnect();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runQueryCallback($query, $bindings, $callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> $e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reconnect to the database if a PDO connection is missing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">reconnectIfMissingConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="keyword">$this</span>-&gt;pdo)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;reconnect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hive on Spark 搭建</title>
      <link href="/2019/running-hive-on-spark/"/>
      <url>/2019/running-hive-on-spark/</url>
      
        <content type="html"><![CDATA[<p>Hive on Spark 就是把 Hive 默认的执行引擎从 MapReduce 换成 Apache Spark。<br>Hive on Spark 只在 Spark 的制定版本上进行了测试，其它版本则不是很有保证。对稳定性有要求可以去<a href="https://cwiki.apache.org/confluence/display/Hive/Hive+on+Spark%3A+Getting+Started" target="_blank" rel="noopener">官方文档</a>查看版本兼容性，再根据 Hive 和 Spark 源码中 pom 文件的配置，另行选择版本。这里几乎全部选择最新版进行演示。</p><h2 id="环境及一些信息"><a href="#环境及一些信息" class="headerlink" title="环境及一些信息"></a>环境及一些信息</h2><ul><li>VMWare 15，参考之前的<a href="https://pyun.top/2019/setup-docker-develop-environment-based-on-vmware/">搭建博文</a><ul><li>Ubuntu 18.04 bionic</li><li>8G 内存</li><li>Docker 18.09.0</li><li>IP: 192.168.99.100，后面看到这个地址出现就自行翻译成你们运行环境的ip</li><li>全程 root 用户操作（手动滑稽）</li></ul></li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">安装Docker</a>，拉取 <a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">MySQL 8</a> 镜像（不使用 Docker 的后面自行安装 MySQL）</li><li>下载安装包<ul><li><a href="https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jdk_x64_linux_hotspot_8u212b04.tar.gz" target="_blank" rel="noopener">AdoptOpenJDK 8</a></li><li><a href="https://www-eu.apache.org/dist/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz" target="_blank" rel="noopener">Maven 3.6.1</a></li><li><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.1.2/hadoop-3.1.2.tar.gz" target="_blank" rel="noopener">Hadoop 3.1.2</a></li><li><a href="https://www-eu.apache.org/dist/hive/hive-3.1.1/apache-hive-3.1.1-bin.tar.gz" target="_blank" rel="noopener">Hive 3.1.1</a></li><li><a href="https://downloads.lightbend.com/scala/2.11.12/scala-2.11.12.tgz" target="_blank" rel="noopener">Scala 2.11.12</a></li><li><a href="http://ftp.ntu.edu.tw/MySQL/Downloads/Connector-J/mysql-connector-java-8.0.16.tar.gz" target="_blank" rel="noopener">Mysql Connector 8.0.16</a></li></ul></li><li><p>Spark 二进制包可以在<a href="https://archive.apache.org/dist/spark/" target="_blank" rel="noopener">这里</a>获取，但是我们要自己编译不内建 Hive 的版本，所以要下载源码编译</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b v2.3.3 https://github.com/apache/spark.git</span><br><span class="line">rm -rf spark/.git</span><br></pre></td></tr></table></figure></li><li><p>创建 /home/tools 文件夹，将解压后的安装包和源码都放这里，解压后的 <code>mysql-connector-java-8.0.16.jar</code> 放到 <code>/home/tools/hive/lib</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">home  </span><br><span class="line">| -- tools  </span><br><span class="line">     | -- hadoop  </span><br><span class="line">     | -- hive  </span><br><span class="line">          | -- lib</span><br><span class="line">               | -- mysql-connector-java-8.0.16.jar</span><br><span class="line">     | -- java   </span><br><span class="line">     | -- maven</span><br><span class="line">     | -- scala  </span><br><span class="line">     | -- spark-source</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Java、Maven-和-Scala-安装"><a href="#Java、Maven-和-Scala-安装" class="headerlink" title="Java、Maven 和 Scala 安装"></a>Java、Maven 和 Scala 安装</h3><ul><li><p>编辑 <code>/etc/profile</code>，加入环境变量  </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/tools/java</span><br><span class="line">export M2_HOME=/home/tools/maven</span><br><span class="line">export SCALA_HOME=/home/tools/scala</span><br><span class="line">export PATH=$&#123;M2_HOME&#125;/bin:$&#123;SCALA_HOME&#125;/bin:$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>在终端运行以下指令，若显示出 jdk、Scala 和 Maven 版本，则安装已完成</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br><span class="line">scala -version</span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure></li><li><p>（可选）网络不好的孩纸可自行配置 Maven 的仓库为阿里云的镜像</p><h3 id="Hadoop-安装"><a href="#Hadoop-安装" class="headerlink" title="Hadoop 安装"></a>Hadoop 安装</h3></li><li><p>安装需要的软件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y ssh pdsh rsync</span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><ul><li><p><code>etc/hadoop/core-site.xml</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        name&gt;fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/tmp/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>etc/hadoop/hdfs-site.xml</code>:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>etc/hadoop/mapred-site.xml</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>etc/hadoop/yarn-site.xml</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>sbin/start-dfs.sh</code>、<code>sbin/stop-dfs.sh</code> 头部配置使用 root 账户:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line">HDFS_DATANODE_USER=root</span><br><span class="line">HDFS_DATANODE_SECURE_USER=hdfs</span><br><span class="line">HDFS_NAMENODE_USER=root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER=root</span><br></pre></td></tr></table></figure></li><li><p><code>sbin/start-yarn.sh</code>、<code>sbin/stop-yarn.sh</code> 头部配置使用 root 账户:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=yarn</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure></li><li><p><code>etc/hadoop/hadoop-env.sh</code> 中添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PDSH_RCMD_TYPE=ssh</span><br><span class="line">export JAVA_HOME=/home/tools/java</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置 SSH 密钥登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 0600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>修改 SSH 配置文件 <code>/etc/ssh/sshd_config</code>，加入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin yes       </span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure><p>重启 SSH 服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure><p>运行 <code>ssh localhost</code> 测试，看是否直接登录到本机</p></li><li><p>格式化文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs namenode -format</span><br></pre></td></tr></table></figure></li><li><p>运行 HDFS，运行成功后可访问 <a href="http://192.168.99.100:9870" target="_blank" rel="noopener">http://192.168.99.100:9870</a> 查看 NameNode 的 Web 管理界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-dfs.sh</span><br></pre></td></tr></table></figure></li><li><p>运行 yarn，运行成功后可访问 <a href="http://192.168.99.100:8088" target="_blank" rel="noopener">http://192.168.99.100:8088</a> 查看 ResourceManager 的 Web 管理界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-yarn.sh</span><br></pre></td></tr></table></figure></li></ul><h3 id="Spark-安装"><a href="#Spark-安装" class="headerlink" title="Spark 安装"></a>Spark 安装</h3><ul><li><p>编译不带 Hive 的版本</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/tools/spark-source</span><br><span class="line">./dev/make-distribution.sh --name <span class="string">"hadoop3-without-hive"</span> --tgz <span class="string">"-Pyarn,-Phadoop-3.1,-Dhadoop.version=3.1.2,parquet-provided,orc-provided"</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">mkdir spark</span><br><span class="line">tar -xf spark-source/spark-2.3.3-bin-hadoop3-without-hive.tgz --strip-components 1 -C spark</span><br></pre></td></tr></table></figure></li><li><p>新建配置文件 <code>/home/tools/spark/conf/spark-env.sh</code>:</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/tools/java</span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=/home/tools/hadoop/etc/hadoop</span><br><span class="line"><span class="built_in">export</span> SPARK_DIST_CLASSPATH=$(/home/tools/hadoop/bin/hadoop classpath)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Hive-安装"><a href="#Hive-安装" class="headerlink" title="Hive 安装"></a>Hive 安装</h3><ul><li><p>复制 Jar 包到 Hive 的 <code>lib</code> 文件夹，其中某些包的小版本号可能会不一样</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/tools/hive</span><br><span class="line">cp ../scala/lib/scala-library.jar lib/</span><br><span class="line">cp ../spark/jars/spark-core_2.11-2.3.3.jar lib/</span><br><span class="line">cp ../spark/jars/spark-network-common_2.11-2.3.3.jar lib/</span><br><span class="line">cp ../spark/jars/jersey-container-servlet-core-2.22.2.jar lib/</span><br><span class="line">cp ../spark/jars/jersey-server-2.22.2.jar lib/</span><br><span class="line">cp ../spark/jars/json4s-ast_2.11-3.2.11.jar lib/</span><br><span class="line">cp ../spark/jars/kryo-shaded-3.0.3.jar lib/</span><br><span class="line">cp ../spark/jars/minlog-1.3.0.jar lib/</span><br><span class="line">cp ../spark/jars/scala-xml_2.11-1.0.5.jar lib/</span><br><span class="line">cp ../spark/jars/spark-launcher_2.11-2.3.3.jar lib/</span><br><span class="line">cp ../spark/jars/spark-network-shuffle_2.11-2.3.3.jar lib/</span><br><span class="line">cp ../spark/jars/spark-unsafe_2.11-2.3.3.jar lib/</span><br><span class="line">cp ../spark/jars/xbean-asm5-shaded-4.4.jar lib/</span><br></pre></td></tr></table></figure></li><li><p>修改配置 <code>conf/hive-site.yml</code>:</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:21109/metastore?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.execution.engine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.enable.spark.execution.engine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>spark.yarn.jars<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000/spark-jars/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>spark.master<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark://localhost.localdomain:7077<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>spark.eventLog.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>spark.eventLog.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///home/tools/hive/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span> #</span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>spark.serializer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.spark.serializer.KryoSerializer<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建运行数据库实例的 <code>docker-compose.yml</code> :</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2.4"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">mysql:</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:8</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">mysql4hive</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">21109</span><span class="string">:3306</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="number">123123</span></span><br></pre></td></tr></table></figure><p>在 <code>docker-compose.yml</code> 所在目录运行:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p>初始化数据库，提示 schemaTool completed 则为成功，连接数据库实例，能看到 <code>metastore</code> 数据库和相关的表 </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/tools/hive/bin/schematool -initSchema -dbType mysql</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>/etc/profile</code> 配置环境变量</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_HOME=/home/tools/hive</span><br><span class="line">export SPARK_HOME=/home/tools/spark</span><br><span class="line">export HADOOP_HOME=/home/tools/hadoop</span><br><span class="line">export PATH=$HIVE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>添加文件用来插入假数据 <code>test_data.txt</code>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 Bryant</span><br><span class="line">2 Jordan</span><br></pre></td></tr></table></figure></li></ul><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/tools/spark/sbin/start-all.sh</span><br></pre></td></tr></table></figure><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@localhost: /home/tools/hive/bin/beeline -u jdbc:hive2://</span><br><span class="line">hive &gt; create table test2 (id int, name string) ROW FORMAT DELIMITED FIELDS TERMINATED BY <span class="string">' '</span>;</span><br><span class="line">hive &gt; load data <span class="built_in">local</span> inpath <span class="string">'/home/tools/hive/test_data.txt'</span> into table test2;</span><br><span class="line">hive &gt; select count(*) from test2;</span><br><span class="line">Hive on Spark Session Web UI URL: http://192.168.99.100:4040</span><br><span class="line"></span><br><span class="line">Query Hive on Spark job[0] stages: [0, 1]</span><br><span class="line">Spark job[0] status = RUNNING</span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line">          STAGES   ATTEMPT        STATUS  TOTAL  COMPLETED  RUNNING  PENDING  FAILED  </span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line">Stage-0 ........         0      FINISHED      1          1        0        0       0  </span><br><span class="line">Stage-1 ........         0      FINISHED      1          1        0        0       0  </span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line">STAGES: 02/02    [==========================&gt;&gt;] 100%  ELAPSED TIME: 13.05 s    </span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line">Spark job[0] finished successfully <span class="keyword">in</span> 13.05 second(s)</span><br><span class="line">OK</span><br><span class="line">+------+</span><br><span class="line">| _c0  |</span><br><span class="line">+------+</span><br><span class="line">| 2    |</span><br><span class="line">+------+</span><br><span class="line">1 row selected (60.643 seconds)</span><br></pre></td></tr></table></figure><p>打完收工 ヾ(￣▽￣)Bye~Bye~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot + Jaeger 搭建使用</title>
      <link href="/2019/jaeger-deploy-with-spring-boot/"/>
      <url>/2019/jaeger-deploy-with-spring-boot/</url>
      
        <content type="html"><![CDATA[<p>基于 Docker 简单搭建 Jaeger 的示例，此例子运行在虚拟机中，虚拟机的 IP 为 192.168.99.100</p><h2 id="Jaeger-搭建"><a href="#Jaeger-搭建" class="headerlink" title="Jaeger 搭建"></a>Jaeger 搭建</h2><h3 id="创建数据库-Cassandra"><a href="#创建数据库-Cassandra" class="headerlink" title="创建数据库 Cassandra"></a>创建数据库 Cassandra</h3><p>使用的 docker-compose 文件如下:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  cassandra:</span> </span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">jaeger_db_cassandra</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">cassandra:3</span></span><br><span class="line"><span class="attr">    volumes:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">/var/lib/cassandra</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9042</span><span class="string">:9042</span></span><br></pre></td></tr></table></figure></p><h3 id="使用-Jaeger-提供的镜像为-Cassandra-初始化数据库"><a href="#使用-Jaeger-提供的镜像为-Cassandra-初始化数据库" class="headerlink" title="使用 Jaeger 提供的镜像为 Cassandra 初始化数据库"></a>使用 Jaeger 提供的镜像为 Cassandra 初始化数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --link jaeger_db_cassandra:cassandra --net cassandra_default --rm -ti jaegertracing/jaeger-cassandra-schema</span><br></pre></td></tr></table></figure><p>因为 Cassandra 用了 Docker-Compose 启动，所以初始化时要用 <code>--net</code> 参数连接到 Cassandra 所在的网络</p><h3 id="启动-Jaeger-的-Query-、-Collector-和-Agent-服务"><a href="#启动-Jaeger-的-Query-、-Collector-和-Agent-服务" class="headerlink" title="启动 Jaeger 的 Query 、 Collector 和 Agent 服务"></a>启动 Jaeger 的 Query 、 Collector 和 Agent 服务</h3><p>使用的 docker-compose 文件如下:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  query:</span> </span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">jaeger_query</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">jaegertracing/jaeger-query:1.11.0</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">SPAN_STORAGE_TYPE=cassandra</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CASSANDRA_KEYSPACE=jaeger_v1_dc1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CASSANDRA_SERVERS=192.168.99.100</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">16686</span><span class="string">:16686/tcp</span></span><br><span class="line"><span class="attr">  collector:</span> </span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">jaeger_collector</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">jaegertracing/jaeger-collector:1.11.0</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">SPAN_STORAGE_TYPE=cassandra</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CASSANDRA_KEYSPACE=jaeger_v1_dc1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CASSANDRA_SERVERS=192.168.99.100</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9411</span><span class="string">:9411/tcp</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">14267</span><span class="string">:14267/tcp</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">14268</span><span class="string">:14268/tcp</span></span><br><span class="line"><span class="attr">  agent:</span> </span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">jaeger_agent</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">jaegertracing/jaeger-agent:1.11.0</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">COLLECTOR_HOST_PORT=192.168.99.100:14267</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5775</span><span class="string">:5775/udp</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">6831</span><span class="bullet">-6832</span><span class="string">:6831-6832/udp</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5778</span><span class="string">:5778/tcp</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">collector</span></span><br></pre></td></tr></table></figure></p><p>每个组件可配置的参数可运行对应的镜像 + <code>-h</code> 参数查看，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -ti jaegertracing/jaeger-collector -h</span><br></pre></td></tr></table></figure></p><p>用 Docker-Compose 运行 Jaeger 时，参数除了配置成环境变量，也可以配置成启动参数的形式，对应的环境变量的名称就是启动的参数去掉 <code>--</code> ，字母大写，’<code>.</code>‘ 转换成 ‘<code>_</code>‘，如：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  query:</span> </span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">jaeger_query</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">jaegertracing/jaeger-query:1.11.0</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">16686</span><span class="string">:16686/tcp</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">"--cassandra.keyspace jaeger_v1_dc1 --cassandra.servers 192.168.99.100"</span></span><br></pre></td></tr></table></figure></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>首先构造一个项目，作为前端，用户访问前端的地址时，前端会调用一次微服务，并返回页面给用户<br>用 IDEA 新建项目，选择 <code>Spring Initializr</code> ，后面的依赖中选择 <code>Web</code> 就行</p><p><code>build.gradle</code> 中引入 <code>Jaeger Client</code> 和发起 Http 调用的 <code>okhttp</code> ，如下所示：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.1.4.RELEASE'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">'io.spring.dependency-management'</span></span><br><span class="line"></span><br><span class="line">bootJar &#123;</span><br><span class="line">    baseName = <span class="string">'frontend'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">    set(<span class="string">'springCloudVersion'</span>, <span class="string">'Greenwich.SR1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'io.jaegertracing:jaeger-client:0.34.0'</span></span><br><span class="line">    implementation <span class="string">'com.squareup.okhttp3:okhttp:3.4.2'</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-thymeleaf'</span></span><br><span class="line"></span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">"org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注册 <code>Tracer</code> 的 Bean ，为了方便这里直接放在框架启动类 <code>Application</code> 中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; SpringApplication.run(Application.class, args); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tracer <span class="title">tracer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SamplerConfiguration samplerConfig = SamplerConfiguration.fromEnv()</span><br><span class="line">                .withType(ConstSampler.TYPE)</span><br><span class="line">                .withParam(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        ReporterConfiguration reporterConfig = ReporterConfiguration.fromEnv()</span><br><span class="line">                .withLogSpans(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Configuration config = <span class="keyword">new</span> Configuration(<span class="string">"frontend-demo"</span>)</span><br><span class="line">                .withSampler(samplerConfig)</span><br><span class="line">                .withReporter(reporterConfig);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config.getTracer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制器中调用别的服务时，将其包装为 <code>Span</code> ，为了能构造调用的上下级关系，把本次调用的 <code>Span</code> 的上下文注入（Inject）到 <code>Tracer</code> 中，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontendController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Tracer tracer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        Scope span = tracer.buildSpan(<span class="string">"frontend-index"</span>).startActive(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        String response = callExternalService(<span class="string">"eureka-hello-service"</span>);</span><br><span class="line"></span><br><span class="line">        span.close();</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"data"</span>, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">callExternalService</span><span class="params">(String name)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String url = <span class="string">"http://192.168.99.100:21001/greeting"</span>;</span><br><span class="line"></span><br><span class="line">        Request.Builder requestBuilder = <span class="keyword">new</span> Request.Builder().url(url);</span><br><span class="line"></span><br><span class="line">        tracer.inject(tracer.activeSpan().context(), Format.Builtin.HTTP_HEADERS, <span class="keyword">new</span> RequestBuilderCarrier(requestBuilder));</span><br><span class="line"></span><br><span class="line">        Request request = requestBuilder.build();</span><br><span class="line"></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        <span class="keyword">try</span> (Response response = client.newCall(request).execute()) &#123;</span><br><span class="line">            <span class="keyword">return</span> response.body().string();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，注入 <code>Span</code> 上下文时用到的 <code>RequestBuilderCarrier</code> 可自定义，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.opentracing.propagation.TextMap;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestBuilderCarrier</span> <span class="keyword">implements</span> <span class="title">TextMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Request.Builder requestBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestBuilderCarrier</span><span class="params">(Request.Builder requestBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.requestBuilder = requestBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"carrier is writer-only"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        requestBuilder.addHeader(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同上，新建一个 Spring Boot 项目，作为被调用的微服务，Jaeger 配置相同，控制器如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String template = <span class="string">"Hello, %s!"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicLong counter = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Tracer tracer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/greeting"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Greeting <span class="title">greeting</span><span class="params">(@RequestParam(value=<span class="string">"name"</span>, defaultValue=<span class="string">"World"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                             @RequestHeader HttpHeaders headers)</span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        SpanContext spanContext = tracer.extract(Format.Builtin.HTTP_HEADERS,</span><br><span class="line">                <span class="keyword">new</span> TextMapExtractAdapter(headers.toSingleValueMap()));</span><br><span class="line">        Span span = tracer.buildSpan(<span class="string">"test"</span>).asChildOf(spanContext).start();</span><br><span class="line"></span><br><span class="line">        span.finish();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Greeting(counter.incrementAndGet(),</span><br><span class="line">                            String.format(template, name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="启动示例代码"><a href="#启动示例代码" class="headerlink" title="启动示例代码"></a>启动示例代码</h2><p>首先，在两个项目中分别运行 <code>gradle build</code> 生成 Jar 文件，这里是 frontend.jar 和 ms-service.jar ，把它们跟docker-compose.yml文件放一起，docker-compose.yml 如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  frontend:</span> </span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">frontend_1</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">adoptopenjdk/openjdk11:jdk-11.0.2.9</span></span><br><span class="line"><span class="attr">    volumes:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">./frontend.jar:/frontend.jar</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">java</span> <span class="bullet">-jar</span> <span class="string">/frontend.jar</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">21000</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">JAEGER_AGENT_HOST=192.168.99.100</span></span><br><span class="line"><span class="attr">  msservice:</span> </span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">ms_service_1</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">adoptopenjdk/openjdk11:jdk-11.0.2.9</span></span><br><span class="line"><span class="attr">    volumes:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">./ms-service.jar:/ms-service.jar</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">java</span> <span class="bullet">-jar</span> <span class="string">/ms-service.jar</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">21001</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">JAEGER_AGENT_HOST=192.168.99.100</span></span><br></pre></td></tr></table></figure></p><p>注意代码跟 docker-compose.yml 中的地址、端口的对应关系<br>用 Docker-Compose 启动项目，在浏览器中访问前端地址 <a href="http://192.168.99.100:21000" target="_blank" rel="noopener">192.168.99.100:21000</a>，获取到返回的页面后，访问 Jaeger Query 的地址 <a href="http://192.168.99.100:16686" target="_blank" rel="noopener">192.168.99.100:16686</a>，左侧栏选择前端服务，点击 <code>Find Traces</code>，即可看到调用链信息</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Jaeger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建虚拟机Docker开发环境</title>
      <link href="/2019/setup-docker-develop-environment-based-on-vmware/"/>
      <url>/2019/setup-docker-develop-environment-based-on-vmware/</url>
      
        <content type="html"><![CDATA[<p>宿主机是 Win 10，需要使用 Docker 作为开发环境的话，使用 VMWare 安装 Linux 虚拟机，如 Ubuntu 18 ，然后在虚拟机里面安装 Docker</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h3><p>新建虚拟机，基本各种默认就行，网络使用nat</p><h3 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h3><ol><li>设置网段<br><code>VMWare</code> -&gt; <code>菜单</code> -&gt; <code>编辑</code> -&gt; <code>虚拟网络编辑器</code> 中配置子网IP和和子网掩码，点击进去 <code>NAT设置</code> 可配置网关IP</li><li>配置静态IP<br><code>Ubuntu</code> 中修改 <code>/etc/netplan/50-cloud-init.yaml</code> 配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        ens32:</span><br><span class="line">            addresses: [192.168.99.100/24]</span><br><span class="line">            dhcp4: no</span><br><span class="line">            gateway4: 192.168.99.2</span><br><span class="line">            nameservers: </span><br><span class="line">                addresses:</span><br><span class="line">                    - 119.29.29.29</span><br><span class="line">                    - 223.5.5.5</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><p><code>addresses</code> 是要配置的静态IP<br><code>gateway4</code> 是前一步配置的网关IP<br><code>nameservers</code> 下面是 DNS 地址配置，如果SSH连接慢的话，可以试一下将 DNS 的第一项改成前一步的网关IP<br>然后使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netplan apply</span><br></pre></td></tr></table></figure></p><p>重启网络服务即可。其它系统根据实际不同做相应的配置  </p><ol start="3"><li>Win 10 的网络连接里面，配置 <code>VMware Network Adapter VMnet8</code> 的IP，点击<code>属性</code> -&gt; <code>TCP/IPV4</code> -&gt; <code>属性</code>，配置 IP 地址和子网掩码即可</li></ol><h3 id="挂载文件"><a href="#挂载文件" class="headerlink" title="挂载文件"></a>挂载文件</h3><p>简单点的可以使用 VMWare 自带的共享文件夹，可参考别的文章，这里使用 <code>cifs</code> 方式挂载</p><ol><li>Win 10 选择要挂载的文件夹，右键 <code>属性</code> -&gt; <code>共享</code> ，进去设置一下  </li><li>Ubuntu 里面修改 <code>/etc/fstab</code> 添加一条挂载设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//192.168.99.1/workspace   /work   cifs   vers=2.1,username=myname,password=mypwd,file_mode=0777,dir_mode=0777,noperm 0 0</span><br></pre></td></tr></table></figure></li></ol><p>这些配置的意思是：</p><ul><li>192.168.99.1：网络设置第3步为宿主机设置的IP</li><li>workspace：Win 10 里面要挂载的、被共享的文件夹名称</li><li>/work：共享文件夹被映射到 Linux 中的这个路径</li><li>myname 和 mypwd：Win 10 的用户名和密码</li><li>其它的是一些文件夹权限的设置  </li></ul><p>请根据实际情况修改<br>运行指令 <code>mount -a</code>，正常的话文件夹就被挂载进来了，这里可能需要根据提示装一些挂载格式支持的软件。重启虚拟机，文件夹会自动挂载，不用每次都跑这条命令。</p><h3 id="Docker-和-Docker-Compose-安装"><a href="#Docker-和-Docker-Compose-安装" class="headerlink" title="Docker 和 Docker Compose 安装"></a>Docker 和 Docker Compose 安装</h3><p>根据文档来就行</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> VMWare </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
