<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pengyun&#39;s Blog</title>
  
  <subtitle>ლ(ٱ٥ٱლ)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pyun.top/"/>
  <updated>2019-05-05T08:13:02.798Z</updated>
  <id>https://pyun.top/</id>
  
  <author>
    <name>pengyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建虚拟机Docker开发环境</title>
    <link href="https://pyun.top/2019/setup-docker-develop-environment-based-on-vmware/"/>
    <id>https://pyun.top/2019/setup-docker-develop-environment-based-on-vmware/</id>
    <published>2019-05-05T02:43:54.185Z</published>
    <updated>2019-05-05T08:13:02.798Z</updated>
    
    <content type="html"><![CDATA[<p>宿主机是 Win 10，需要使用 Docker 作为开发环境的话，使用 VMWare 安装 Linux 虚拟机，如 Ubuntu 18 ，然后在虚拟机里面安装 Docker</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h3><p>新建虚拟机，基本各种默认就行，网络使用nat</p><h3 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h3><ol><li>设置网段<br><code>VMWare</code> -&gt; <code>菜单</code> -&gt; <code>编辑</code> -&gt; <code>虚拟网络编辑器</code> 中配置子网IP和和子网掩码，点击进去 <code>NAT设置</code> 可配置网关IP</li><li>配置静态IP<br><code>Ubuntu</code> 中修改 <code>/etc/netplan/50-cloud-init.yaml</code> 配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        ens32:</span><br><span class="line">            addresses: [192.168.99.100/24]</span><br><span class="line">            dhcp4: no</span><br><span class="line">            gateway4: 192.168.99.2</span><br><span class="line">            nameservers: </span><br><span class="line">                addresses:</span><br><span class="line">                    - 119.29.29.29</span><br><span class="line">                    - 223.5.5.5</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><p><code>addresses</code> 是要配置的静态IP<br><code>gateway4</code> 是前一步配置的网关IP<br><code>nameservers</code> 下面是 DNS 地址配置，如果SSH连接慢的话，可以试一下将 DNS 的第一项改成前一步的网关IP<br>然后使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netplan apply</span><br></pre></td></tr></table></figure></p><p>重启网络服务即可。其它系统根据实际不同做相应的配置  </p><ol start="3"><li>Win 10 的网络连接里面，配置 <code>VMware Network Adapter VMnet8</code> 的IP，点击<code>属性</code> -&gt; <code>TCP/IPV4</code> -&gt; <code>属性</code>，配置 IP 地址和子网掩码即可</li></ol><h3 id="挂载文件"><a href="#挂载文件" class="headerlink" title="挂载文件"></a>挂载文件</h3><p>简单点的可以使用 VMWare 自带的共享文件夹，可参考别的文章，这里使用 <code>cifs</code> 方式挂载</p><ol><li>Win 10 选择要挂载的文件夹，右键 <code>属性</code> -&gt; <code>共享</code> ，进去设置一下  </li><li>Ubuntu 里面修改 <code>/etc/fstab</code> 添加一条挂载设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//192.168.99.1/workspace   /work   cifs   vers=2.1,username=myname,password=mypwd,file_mode=0777,dir_mode=0777,noperm 0 0</span><br></pre></td></tr></table></figure></li></ol><p>这些配置的意思是：</p><ul><li>192.168.99.1：网络设置第3步为宿主机设置的IP</li><li>workspace：Win 10 里面要挂载的、被共享的文件夹名称</li><li>/work：共享文件夹被映射到 Linux 中的这个路径</li><li>myname 和 mypwd：Win 10 的用户名和密码</li><li>其它的是一些文件夹权限的设置  </li></ul><p>请根据实际情况修改<br>运行指令 <code>mount -a</code>，正常的话文件夹就被挂载进来了，这里可能需要根据提示装一些挂载格式支持的软件。重启虚拟机，文件夹会自动挂载，不用每次都跑这条命令。</p><h3 id="Docker-和-Docker-Compose-安装"><a href="#Docker-和-Docker-Compose-安装" class="headerlink" title="Docker 和 Docker Compose 安装"></a>Docker 和 Docker Compose 安装</h3><p>根据文档来就行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;宿主机是 Win 10，需要使用 Docker 作为开发环境的话，使用 VMWare 安装 Linux 虚拟机，如 Ubuntu 18 ，然后在虚拟机里面安装 Docker&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; cl
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://pyun.top/tags/Docker/"/>
    
      <category term="VMWare" scheme="https://pyun.top/tags/VMWare/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot + Jaeger 搭建使用</title>
    <link href="https://pyun.top/2019/jaeger-deploy-with-spring-boot/"/>
    <id>https://pyun.top/2019/jaeger-deploy-with-spring-boot/</id>
    <published>2019-03-26T01:30:22.643Z</published>
    <updated>2019-05-06T03:27:04.775Z</updated>
    
    <content type="html"><![CDATA[<p>基于 Docker 简单搭建 Jaeger 的示例，此例子运行在虚拟机中，虚拟机的 IP 为 192.168.99.100</p><h2 id="Jaeger-搭建"><a href="#Jaeger-搭建" class="headerlink" title="Jaeger 搭建"></a>Jaeger 搭建</h2><h3 id="创建数据库-Cassandra"><a href="#创建数据库-Cassandra" class="headerlink" title="创建数据库 Cassandra"></a>创建数据库 Cassandra</h3><p>使用的 docker-compose 文件如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  cassandra: </span><br><span class="line">    container_name: jaeger_db_cassandra</span><br><span class="line">    image: cassandra:3</span><br><span class="line">    volumes: </span><br><span class="line">      - /var/lib/cassandra</span><br><span class="line">    ports:</span><br><span class="line">      - 9042:9042</span><br></pre></td></tr></table></figure></p><h3 id="使用-Jaeger-提供的镜像为-Cassandra-初始化数据库"><a href="#使用-Jaeger-提供的镜像为-Cassandra-初始化数据库" class="headerlink" title="使用 Jaeger 提供的镜像为 Cassandra 初始化数据库"></a>使用 Jaeger 提供的镜像为 Cassandra 初始化数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --link jaeger_db_cassandra:cassandra --net cassandra_default --rm -ti jaegertracing/jaeger-cassandra-schema</span><br></pre></td></tr></table></figure><p>因为 Cassandra 用了 Docker-Compose 启动，所以初始化时要用 <code>--net</code> 参数连接到Cassandra所在的网络</p><h3 id="启动-Jaeger-的-Query-、-Collector-和-Agent-服务"><a href="#启动-Jaeger-的-Query-、-Collector-和-Agent-服务" class="headerlink" title="启动 Jaeger 的 Query 、 Collector 和 Agent 服务"></a>启动 Jaeger 的 Query 、 Collector 和 Agent 服务</h3><p>使用的 docker-compose 文件如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  query: </span><br><span class="line">    container_name: jaeger_query</span><br><span class="line">    image: jaegertracing/jaeger-query:1.11.0</span><br><span class="line">    environment: </span><br><span class="line">      - SPAN_STORAGE_TYPE=cassandra</span><br><span class="line">      - CASSANDRA_KEYSPACE=jaeger_v1_dc1</span><br><span class="line">      - CASSANDRA_SERVERS=192.168.99.100</span><br><span class="line">    ports:</span><br><span class="line">      - 16686:16686/tcp</span><br><span class="line">  collector: </span><br><span class="line">    container_name: jaeger_collector</span><br><span class="line">    image: jaegertracing/jaeger-collector:1.11.0</span><br><span class="line">    environment: </span><br><span class="line">      - SPAN_STORAGE_TYPE=cassandra</span><br><span class="line">      - CASSANDRA_KEYSPACE=jaeger_v1_dc1</span><br><span class="line">      - CASSANDRA_SERVERS=192.168.99.100</span><br><span class="line">    ports:</span><br><span class="line">      - 9411:9411/tcp</span><br><span class="line">      - 14267:14267/tcp</span><br><span class="line">      - 14268:14268/tcp</span><br><span class="line">  agent: </span><br><span class="line">    container_name: jaeger_agent</span><br><span class="line">    image: jaegertracing/jaeger-agent:1.11.0</span><br><span class="line">    environment:</span><br><span class="line">      - COLLECTOR_HOST_PORT=192.168.99.100:14267</span><br><span class="line">    ports:</span><br><span class="line">      - 5775:5775/udp</span><br><span class="line">      - 6831-6832:6831-6832/udp</span><br><span class="line">      - 5778:5778/tcp</span><br><span class="line">    depends_on:</span><br><span class="line">      - collector</span><br></pre></td></tr></table></figure></p><p>每个组件可配置的参数可运行对应的镜像 + <code>-h</code> 参数查看，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -ti jaegertracing/jaeger-collector -h</span><br></pre></td></tr></table></figure></p><p>用 Docker-Compose 运行 Jaeger 时，参数除了配置成环境变量，也可以配置成启动参数的形式，对应的环境变量的名称就是启动的参数去掉 <code>--</code> ，字母大写，’<code>.</code>‘ 转换成 ‘<code>_</code>‘，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  query: </span><br><span class="line">    container_name: jaeger_query</span><br><span class="line">    image: jaegertracing/jaeger-query:1.11.0</span><br><span class="line">    ports:</span><br><span class="line">      - 16686:16686/tcp</span><br><span class="line">    command: &quot;--cassandra.keyspace jaeger_v1_dc1 --cassandra.servers 192.168.99.100&quot;</span><br></pre></td></tr></table></figure></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>首先构造一个项目，作为前端，用户访问前端的地址时，前端会调用一次微服务，并返回页面给用户<br>用 IDEA 新建项目，选择 <code>Spring Initializr</code> ，后面的依赖中选择 <code>Web</code> 就行</p><p><code>build.gradle</code> 中引入 <code>Jaeger Client</code> 和发起 Http 调用的 <code>okhttp</code> ，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &apos;org.springframework.boot&apos; version &apos;2.1.4.RELEASE&apos;</span><br><span class="line">    id &apos;java&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: &apos;io.spring.dependency-management&apos;</span><br><span class="line"></span><br><span class="line">bootJar &#123;</span><br><span class="line">    baseName = &apos;frontend&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceCompatibility = &apos;11&apos;</span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">    set(&apos;springCloudVersion&apos;, &apos;Greenwich.SR1&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &apos;io.jaegertracing:jaeger-client:0.34.0&apos;</span><br><span class="line">    implementation &apos;com.squareup.okhttp3:okhttp:3.4.2&apos;</span><br><span class="line"></span><br><span class="line">    implementation &apos;org.springframework.boot:spring-boot-starter-web&apos;</span><br><span class="line">    implementation &apos;org.springframework.boot:spring-boot-starter-thymeleaf&apos;</span><br><span class="line"></span><br><span class="line">    testImplementation &apos;org.springframework.boot:spring-boot-starter-test&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom &quot;org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注册 <code>Tracer</code> 的 Bean ，为了方便这里直接放在框架启动类 <code>Application</code> 中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Tracer tracer() &#123;</span><br><span class="line">        SamplerConfiguration samplerConfig = SamplerConfiguration.fromEnv()</span><br><span class="line">                .withType(ConstSampler.TYPE)</span><br><span class="line">                .withParam(1);</span><br><span class="line"></span><br><span class="line">        ReporterConfiguration reporterConfig = ReporterConfiguration.fromEnv()</span><br><span class="line">                .withLogSpans(true);</span><br><span class="line"></span><br><span class="line">        Configuration config = new Configuration(&quot;frontend-demo&quot;)</span><br><span class="line">                .withSampler(samplerConfig)</span><br><span class="line">                .withReporter(reporterConfig);</span><br><span class="line"></span><br><span class="line">        return config.getTracer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制器中调用别的服务时，将其包装为 <code>Span</code> ，为了能构造调用的上下级关系，把本次调用的 <code>Span</code> 的上下文注入（Inject）到 <code>Tracer</code> 中，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class FrontendController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Tracer tracer;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/&quot;)</span><br><span class="line">    public String index(Model model) throws IOException, InterruptedException &#123;</span><br><span class="line">        Scope span = tracer.buildSpan(&quot;frontend-index&quot;).startActive(true);</span><br><span class="line"></span><br><span class="line">        String response = callExternalService(&quot;eureka-hello-service&quot;);</span><br><span class="line"></span><br><span class="line">        span.close();</span><br><span class="line"></span><br><span class="line">        model.addAttribute(&quot;data&quot;, response);</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String callExternalService(String name) throws IOException, InterruptedException &#123;</span><br><span class="line">        String url = &quot;http://192.168.99.100:21001/greeting&quot;;</span><br><span class="line"></span><br><span class="line">        Request.Builder requestBuilder = new Request.Builder().url(url);</span><br><span class="line"></span><br><span class="line">        tracer.inject(tracer.activeSpan().context(), Format.Builtin.HTTP_HEADERS, new RequestBuilderCarrier(requestBuilder));</span><br><span class="line"></span><br><span class="line">        Request request = requestBuilder.build();</span><br><span class="line"></span><br><span class="line">        OkHttpClient client = new OkHttpClient();</span><br><span class="line">        try (Response response = client.newCall(request).execute()) &#123;</span><br><span class="line">            return response.body().string();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，注入 <code>Span</code> 上下文时用到的 <code>RequestBuilderCarrier</code> 可自定义，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import io.opentracing.propagation.TextMap;</span><br><span class="line">import okhttp3.Request;</span><br><span class="line"></span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class RequestBuilderCarrier implements TextMap &#123;</span><br><span class="line">    private final Request.Builder requestBuilder;</span><br><span class="line"></span><br><span class="line">    public RequestBuilderCarrier(Request.Builder requestBuilder) &#123;</span><br><span class="line">        this.requestBuilder = requestBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;carrier is writer-only&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void put(String key, String value) &#123;</span><br><span class="line">        requestBuilder.addHeader(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同上，新建一个 Spring Boot 项目，作为被调用的微服务，Jaeger 配置相同，控制器如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class GreetingController &#123;</span><br><span class="line"></span><br><span class="line">    private static final String template = &quot;Hello, %s!&quot;;</span><br><span class="line">    private final AtomicLong counter = new AtomicLong();</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Tracer tracer;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/greeting&quot;)</span><br><span class="line">    public Greeting greeting(@RequestParam(value=&quot;name&quot;, defaultValue=&quot;World&quot;) String name,</span><br><span class="line">                             @RequestHeader HttpHeaders headers)</span><br><span class="line">            throws IOException, InterruptedException &#123;</span><br><span class="line">        SpanContext spanContext = tracer.extract(Format.Builtin.HTTP_HEADERS,</span><br><span class="line">                new TextMapExtractAdapter(headers.toSingleValueMap()));</span><br><span class="line">        Span span = tracer.buildSpan(&quot;test&quot;).asChildOf(spanContext).start();</span><br><span class="line"></span><br><span class="line">        span.finish();</span><br><span class="line"></span><br><span class="line">        return new Greeting(counter.incrementAndGet(),</span><br><span class="line">                            String.format(template, name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="启动示例代码"><a href="#启动示例代码" class="headerlink" title="启动示例代码"></a>启动示例代码</h2><p>首先，在两个项目中分别运行 <code>gradle build</code> 生成 Jar 文件，这里是 frontend.jar 和 ms-service.jar ，把它们跟docker-compose.yml文件放一起，docker-compose.yml 如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  frontend: </span><br><span class="line">    container_name: frontend_1</span><br><span class="line">    image: adoptopenjdk/openjdk11:jdk-11.0.2.9</span><br><span class="line">    volumes: </span><br><span class="line">      - ./frontend.jar:/frontend.jar</span><br><span class="line">    command: java -jar /frontend.jar</span><br><span class="line">    ports:</span><br><span class="line">      - 21000:8080</span><br><span class="line">    environment:</span><br><span class="line">      - JAEGER_AGENT_HOST=192.168.99.100</span><br><span class="line">  msservice: </span><br><span class="line">    container_name: ms_service_1</span><br><span class="line">    image: adoptopenjdk/openjdk11:jdk-11.0.2.9</span><br><span class="line">    volumes: </span><br><span class="line">      - ./ms-service.jar:/ms-service.jar</span><br><span class="line">    command: java -jar /ms-service.jar</span><br><span class="line">    ports:</span><br><span class="line">      - 21001:8080</span><br><span class="line">    environment:</span><br><span class="line">      - JAEGER_AGENT_HOST=192.168.99.100</span><br></pre></td></tr></table></figure></p><p>注意代码跟 docker-compose.yml 中的地址、端口的对应关系<br>用 Docker-Compose 启动项目，在浏览器中访问前端地址 <a href="http://192.168.99.100:21000" target="_blank" rel="noopener">192.168.99.100:21000</a>，获取到返回的页面后，访问 Jaeger Query 的地址 <a href="http://192.168.99.100:16686" target="_blank" rel="noopener">192.168.99.100:16686</a>，左侧栏选择前端服务，点击 <code>Find Traces</code>，即可看到调用链信息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基于 Docker 简单搭建 Jaeger 的示例，此例子运行在虚拟机中，虚拟机的 IP 为 192.168.99.100&lt;/p&gt;
&lt;h2 id=&quot;Jaeger-搭建&quot;&gt;&lt;a href=&quot;#Jaeger-搭建&quot; class=&quot;headerlink&quot; title=&quot;Jaege
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://pyun.top/tags/Spring-Boot/"/>
    
      <category term="Jaeger" scheme="https://pyun.top/tags/Jaeger/"/>
    
  </entry>
  
</feed>
